How did viewing a diff between two versions help you spot the bug?
Seeing what was removed and what was added, particularly when there 
are both right next to eachother (i.e. a line was changed), helped 
me spot where the typo occurred that broke the functionality of the 
program.

Command
diff -u game_old.js game_new.js



How could having easy access to the entire history of a file make 
you a more efficient programmer in the long term?
It would allow you to experiment with new ideas without the fear of 
losing track of where you were.  You could just revert back to where 
you branched off if you find your new idea didn't really work out as 
well as you thought it might.



What do you think are the pros and cons of manually choosing when to 
create a commit, like you do in Git, vs having versions automatically 
saved, like Google Docs does?
Pros: Your history is more logically organized. Cons: If you're
forgetful you lose the logical organization.



Why do you think some version control systems, like Git, allow saving 
multiple files in one commit, while others, like Google Docs, treat 
each file separately?
Google Docs assumes each document is independent, which in most 
use-cases is going to be accurate.  Git, however, is primarily used 
for code, where the average use-case is not so clear. New features 
can often result in multiple new files and/or changes to files.



How can you use the commands git log and git diff to view the history 
of files?
The command 'git log' (or git log --stat for good summary information) 
can be used to see a history of all of the commits to a repository.  
The command 'git diff [a] [b]' can be used to see a line by line 
difference of changes between [a] and [b].



How might using version control make you more confident to make changes 
that could break something?
It would be easier to find the mistakes that were made, and also to 
revert the code back to a working state.



Now that you have your workspace set up, what do you want to try using 
Git for?
I want to try using Git for work, though I'm curious about introducing 
it to my wife for her digital art projects.